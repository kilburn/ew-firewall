#!/bin/sh

### BEGIN INIT INFO
# Provides:             ew_firewall
# Required-Start:       $network $local_fs $remote_fs
# Required-Stop:
# Should-Stop:          $local_fs
# Default-Start:        2 3 4 5
# Default-Stop:         0 1 6
# Short-Description:    Entorn Web firewall rules
### END INIT INFO
# Note: do not modify any of these vars here, use /etc/default/$NAME instead

PATH=/sbin:/bin:/usr/sbin:/usr/bin
DESC="Entorn Web firewall rules"
NAME=ew-firewall
LFILE=/var/run/$NAME
IPTABLES=/sbin/iptables
EWF=/usr/local/sbin/ew-firewall
DIETIME=3
START=0
BLOCK=0

# Debian LSB extensions (will be used if init-functions doesn't override them):
log_daemon_msg() {
	if [ ! -z "${2:-}" ]; then
		log_success_msg "${1:-}: ${2:-}"
	else
		log_success_msg "${1:-}"
	fi
}
log_end_msg() {
	local status="$1"
}
log_progress_msg () {
	log_success_msg " $@"
}

# if not present (e.g. *BSD) make sure to provide compatible methods via /etc/default/$NAME
if [ -f /lib/lsb/init-functions ]; then
	. /lib/lsb/init-functions
fi

# Read config file if present.
if [ -r /etc/default/$NAME ]; then
	. /etc/default/$NAME
fi

if [ $START -eq 0 ]; then
	log_warning_msg "Not starting $DESC: edit /etc/default/$NAME."
	exit 1
fi

add_rules() {
	# All traffic should pass through our filtering tables
	${IPTABLES} -N EW_INPUT
	${IPTABLES} -N EW_OUTPUT
	${IPTABLES} -A INPUT -j EW_INPUT 
	${IPTABLES} -A OUTPUT -j EW_OUTPUT
	${IPTABLES} -N ew-log
	${IPTABLES} -A ew-log -j LOG --log-level 4 --log-prefix "ewf-log:" --log-uid
	${IPTABLES} -N ew-log-accept
	${IPTABLES} -A ew-log-accept -j LOG --log-level 4 --log-prefix "ewf-acept:" --log-uid
	${IPTABLES} -A ew-log-accept -j ACCEPT
	${IPTABLES} -N ew-log-drop
	${IPTABLES} -A ew-log-drop -j LOG --log-level 4 --log-prefix "ewf-drop:" --log-uid
	if [ $BLOCK -ne 1 ]; then
		log_warning_msg "$DESC: Not really blocking connections."
	else
		${IPTABLES} -A ew-log-drop -j REJECT
	fi

	# Accept already stablished connections
	${IPTABLES} -A EW_OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
	${IPTABLES} -A EW_INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

	# Load the whitelist rules
	$EWF rules | while read line
	do
		eval "$line"
	done 
	# Block website users' outgoing connections by default
 	${IPTABLES} -A EW_OUTPUT -m owner --uid-owner 2000-5000 -p tcp -j ew-log-drop
	
	# Touch lock file
	touch $LFILE
}

remove_rules() {
	${IPTABLES} -D INPUT -j EW_INPUT
	${IPTABLES} -D OUTPUT -j EW_OUTPUT
	${IPTABLES} -F EW_INPUT
	${IPTABLES} -F EW_OUTPUT
	${IPTABLES} -X EW_INPUT
	${IPTABLES} -X EW_OUTPUT
	${IPTABLES} -F ew-log
	${IPTABLES} -F ew-log-accept
	${IPTABLES} -F ew-log-drop
	${IPTABLES} -X ew-log
	${IPTABLES} -X ew-log-accept
	${IPTABLES} -X ew-log-drop

	# Remove lock file
	rm $LFILE
}

case "$1" in
  start)
	log_daemon_msg "Starting $DESC" "$NAME"

	if [ -e "$LFILE" ]; then
		echo ""
	   	log_warning_msg "${NAME} is already started" >&2
	else
		add_rules
	fi

	log_end_msg $?
	;;
  stop)
	log_daemon_msg "Stopping $DESC" "$NAME"
	if [ ! -e "$LFILE" ]; then
		echo ""
		log_warning_msg "${NAME} is already stopped" >&2
	else
		remove_rules
	fi

	log_end_msg $?
	;;
  restart|force-reload)
	log_daemon_msg "Stopping $DESC" "$NAME"

	if [ ! -e "$LFILE" ]; then
		echo ""
		log_warning_msg "${NAME} is already stopped" >&2
	else
		remove_rules
		log_end_msg $?
		[ -n "$DIETIME" ] && sleep "$DIETIME"
	fi

	log_daemon_msg "Starting $DESC" "$NAME"

	add_rules

	log_end_msg $?

	;;
  status)
	log_daemon_msg "Checking status of $DESC" "$NAME"

	if [ ! -e "$LFILE" ]; then
	   log_progress_msg "stopped"
	else
	   log_progress_msg "started"
	fi

	echo ""
	;;
  blocked)
  	$EWF blocked
	;;
  *)
	echo "Usage: /etc/init.d/$NAME {start|stop|restart|force-reload|status|blocked}" >&2
	exit 1
	;;
esac

exit 0
